---
apiVersion: v1
kind: Namespace
metadata:
  name: unifi
  annotations:
    linkerd.io/inject: enabled
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: unifi-data
  namespace: unifi
spec:
  storageClassName: longhorn-backup
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: site-configs
  namespace: unifi
data:
  default-config.gateway.json: |
    {
      "system": {
        "name-server": ["192.168.10.16", "100.100.100.1"]
      },
      "service": {
        "nat": {
          "rule": {
            "30": {
              "description": "Force DNS to Pi-Hole (IOT)",
              "destination": {
                "port": "53",
                "group": {
                  "address-group": "!637160214cedfd00eada7b9b"
                }
              },
              "inbound-interface": "eth1.30",
              "inside-address": {
                "address": "192.168.10.16"
              },
              "log": "enable",
              "protocol": "tcp_udp",
              "type": "destination"
            },
            "5030": {
              "description": "Masquerade for Pi-Hole DNS (IOT)",
              "destination": {
                "address": "192.168.10.16",
                "port": "53"
              },
              "log": "disable",
              "outbound-interface": "eth1.30",
              "protocol": "tcp_udp",
              "type": "masquerade"
            }
          }
        }
      },
      "protocols": {
        "bgp": {
          "64512": {
            "neighbor": {
              "192.168.10.142": {
                "remote-as": "64512"
              },
              "192.168.10.136": {
                "remote-as": "64512"
              },
              "192.168.10.34": {
                "remote-as": "64512"
              },
              "192.168.10.97": {
                "remote-as": "64512"
              },
              "192.168.10.60": {
                "remote-as": "64512"
              }
            },
            "parameters": {
              "router-id": "192.168.1.1"
            }
          }
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: unifi
  namespace: unifi
  labels:
    app: unifi
  annotations:
    reloader.stakater.com/reload: "site-configs"
spec:
  selector:
    matchLabels:
      app: unifi
  replicas: 1
  strategy:
    type: Recreate # due to PVC
  template:
    metadata:
      labels:
        app: unifi
    spec:
      initContainers:
        - name: site-configs
          image: busybox:1.36.1
          command:
            - sh
            - -c
            - for i in /configs/*; do mkdir -p /unifi/data/sites/$(basename $i | cut -d '-' -f 1) && cp -v $i /unifi/data/sites/$(basename $i | cut -d '-' -f 1)/$(basename $i | cut -d '-' -f 2); done
          volumeMounts:
            - name: data
              mountPath: /unifi
            - name: site-configs
              mountPath: /configs
      containers:
        - name: unifi
          image: linuxserver/unifi-controller:7.5.174
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3478 # STUN
              protocol: UDP
            - containerPort: 8080 # Control
            - containerPort: 8443 # API
            - containerPort: 8880 # HTTP
            - containerPort: 8843 # HTTPS
            - containerPort: 6789 # Speedtest
            - containerPort: 10001 # Discovery
              protocol: UDP
            - containerPort: 1900 # L2 Discovery
              protocol: UDP
          env:
            # Linuxserver.io images require root, but drop down to user-level
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: MEM_STARTUP
              value: "2048"
            - name: MEM_LIMIT
              value: "4096"
          resources:
            requests:
              memory: 2048Mi
              cpu: 1000m
            limits:
              memory: 4096Mi
          volumeMounts:
            - name: data
              mountPath: /config
          livenessProbe:
            httpGet:
              path: /manage/account/login
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /manage/account/login
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: unifi-data
        - name: site-configs
          configMap:
            name: site-configs
---
# If your k8s version < v1.23, you will need to enable the
# MixedProtocolLBService feature gate to use a single service for
# UDP and TCP connections, otherwise you need 2 separate services.
apiVersion: v1
kind: Service
metadata:
  name: unifi
  namespace: unifi
  annotations:
    metallb.universe.tf/allow-shared-ip: ingress-nginx
spec:
  selector:
    app: unifi
  ports:
    - name: stun
      port: 3478
      targetPort: 3478
      protocol: UDP
    - name: control
      port: 8080
      targetPort: 8080
    - name: api
      port: 8443
      targetPort: 8443
    - name: http
      port: 8880
      targetPort: 8880
    - name: https
      port: 8843
      targetPort: 8843
    - name: speedtest
      port: 6789
      targetPort: 6789
    - name: discovery
      port: 10001
      targetPort: 10001
      protocol: UDP
    - name: l2-discovery
      port: 1900
      targetPort: 1900
      protocol: UDP
  type: LoadBalancer
  loadBalancerIP: 192.168.42.1
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: unifi
  namespace: unifi
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    external-dns.alpha.kubernetes.io/hostname: unifi.kyle2.net
    nginx.ingress.kubernetes.io/backend-protocol: https
    nginx.ingress.kubernetes.io/proxy-body-size: "16M"

    # Better WebSockets support
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - unifi.kyle2.net
      secretName: unifi-tls
  rules:
    - host: unifi.kyle2.net
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: unifi
                port:
                  name: api
